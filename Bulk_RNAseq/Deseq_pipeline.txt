# ------------------- INSTALL REQUIRED PACKAGES -------------------
BiocManager::install("DESeq2")
BiocManager::install("apeglm")
BiocManager::install("pheatmap")
install.packages("gridExtra", force = TRUE)

# ------------------- LOAD LIBRARIES -------------------
library(EnhancedVolcano)  # for volcano plots
library(DESeq2)           # core package for differential expression
library(pheatmap)         # heatmaps
library(dplyr)            # data wrangling
library(RColorBrewer)     # color palettes
library(ggplot2)          # plotting
library(extrafont)        # fonts for plots
library(ggrepel)          # avoid overlapping labels in plots
library(apeglm)           # shrinkage estimation for log2FC
library(svglite)          # save plots as SVG

# ------------------- CHECK WORKING DIRECTORY -------------------
getwd()  # confirm working directory before loading files

# ------------------- LOAD COUNT DATA -------------------
count_data <- read.csv("count_drought.csv", header = TRUE, row.names = 1)
class(count_data)        # should be matrix or dataframe
count_data <- round(count_data)  # round counts to integers
count_data
colnames(count_data)     # check sample names
head(count_data)         # view first rows

# ------------------- LOAD SAMPLE INFORMATION -------------------
sample_info <- read.csv("design.csv", header = TRUE, row.names = 1)
colnames(sample_info)    # check sample metadata columns
head(sample_info)

# Convert metadata columns to factors
sample_info$Treatment <- factor(sample_info$Treatment)
sample_info$Sequencing <- factor(sample_info$Sequencing)

# ------------------- CREATE DESeq OBJECT -------------------
dds <- DESeqDataSetFromMatrix(countData = count_data,
                              colData = sample_info,
                              design = ~Treatment)

# Set "untreated" as reference level for Treatment
dds$Treatment <- factor(dds$Treatment, levels = c("untreated", "treated"))

# ------------------- FILTER LOW-COUNT GENES -------------------
keep <- rowSums(counts(dds)) >= 5   # keep genes with â‰¥5 counts across samples
dds <- dds[keep,]

# ------------------- DIFFERENTIAL EXPRESSION ANALYSIS -------------------
dds <- DESeq(dds)           # run DESeq2 pipeline
deseq_result <- results(dds)
deseq_result
summary(deseq_result)

# Convert results to dataframe for easier handling
deseq_result <- as.data.frame(deseq_result)
class(deseq_result)

# Order results by p-value
deseq_result_ordered <- deseq_result[order(deseq_result$pvalue),]
head(deseq_result_ordered)

# ------------------- FILTER SIGNIFICANT GENES -------------------
# Step 1: adjusted p-value < 0.05
filtered <- deseq_result %>% filter(deseq_result$pvalue < 0.05)

# Step 2: absolute log2FC > 1
filtered <- filtered %>% filter(abs(filtered$log2FoldChange) > 1)

dim(filtered)  # number of significant genes

# ------------------- SAVE RESULTS -------------------
write.csv(deseq_result, "deseq_result.all.csv")       # all results
write.csv(filtered, "deseq_result.filtered.csv")      # filtered significant results

# Save normalized counts
normalized_counts <- counts(dds, normalized = TRUE)
write.csv(normalized_counts, "normalized.csv")

# ------------------- VISUALIZATION -------------------

# Dispersion plot
plotDispEsts(dds, main="Dispersion plot")

# PCA plot (variance stabilizing transformation)
vsd <- vst(dds, blind = FALSE)
PCA <- plotPCA(vsd, intgroup = "Treatment")
ggsave("PCA.svg", plot = PCA, width = 8, height = 10)

# Heatmap: sample-to-sample distances
sampleDists <- dist(t(assay(vsd)))
sampleDistsMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette(rev(brewer.pal(9,"Blues")))(225)
pheatmap <- pheatmap(sampleDistsMatrix,
                     clustering_distance_rows = sampleDists,
                     clustering_distance_cols = sampleDists,
                     col=colors)
ggsave("pheatmap.svg", plot = pheatmap, width = 8, height = 10)

# Heatmap: top 10 DE genes
top_hits <- deseq_result[order(deseq_result$padj), ][1:10,]
top_hits <- row.names(top_hits)
rld <- rlog(dds, blind = FALSE)
tophit_heatmap <- pheatmap(assay(rld)[top_hits,])
ggsave("tophit_heatmap.svg", plot = tophit_heatmap, width = 8, height = 10)

# Heatmap: top 20 most variable genes
top_hits <- head(order(rowVars(assay(rld)), decreasing = TRUE), 20)
annot_info <- data.frame(Treatment = colData(dds)$Treatment)
rownames(annot_info) <- colnames(dds)
pheatmap2 <- pheatmap(assay(rld)[top_hits, ],
                      cluster_rows = TRUE,
                      cluster_cols = TRUE,
                      show_rownames = TRUE,
                      annotation_col = annot_info)
ggsave("pheatmap2.svg", plot = pheatmap2, width = 8, height = 10)

# MA plot (log2FC vs mean expression)
plotMA(dds, ylim = c(-2,2))
resLFC <- lfcShrink(dds, coef = "Treatment_treated_vs_untreated", type = "apeglm")
plotMA(resLFC, ylim = c(-2,2))
ggsave("MAplot.svg", width = 8, height = 10)

# ------------------- VOLCANO PLOT -------------------
font_import()   # import system fonts
loadfonts(device = "win") 

resLFC <- read.csv("deseq_result.all.csv", header = TRUE, row.names = 1)
resLFC <- as.data.frame(resLFC)

# Label significant genes
resLFC$diffexpressed <- "NO"
resLFC$diffexpressed[resLFC$log2FoldChange < -1 & resLFC$pvalue < 0.05] <- "DOWN"
resLFC$diffexpressed[resLFC$log2FoldChange >  1 & resLFC$pvalue < 0.05] <- "UP"

# Pick top 20 most significant genes (by p-value) for labeling
resLFC$delabel <- NA
resLFC$Gene <- rownames(resLFC)
rows_to_delete <- which(is.na(resLFC$pvalue))
resLFC <- resLFC[-rows_to_delete, ]
thresh <- head(arrange(resLFC,pvalue),20)$pvalue[20]
resLFC$delabel[resLFC$pvalue<=thresh] <- (resLFC$Gene[resLFC$pvalue<=thresh])

# Volcano plot
volcano_plot <- ggplot(data = resLFC,
                       aes(x=log2FoldChange, y=-log10(pvalue),
                           col=diffexpressed, label=delabel)) +
  geom_point() +
  theme_minimal() +
  scale_color_manual(values = c("green","blue","red")) +
  geom_vline(xintercept = c(-0.8,0.8), col="red") +
  geom_hline(yintercept = -log10(0.05), col="red") +
  theme(text=element_text(family="Times New Roman",
                          face = "bold",
                          size = 20),
        panel.border = element_rect(color = "black", fill = NA, size = 0.5))

ggsave("volcano_plot.svg", plot = volcano_plot, width = 8, height = 10)
